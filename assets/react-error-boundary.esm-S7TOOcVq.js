import{r as d}from"./index-LTnuddGD.js";const c=d.createContext(null),i={didCatch:!1,error:null};class h extends d.Component{constructor(r){super(r),this.resetErrorBoundary=this.resetErrorBoundary.bind(this),this.state=i}static getDerivedStateFromError(r){return{didCatch:!0,error:r}}resetErrorBoundary(){const{error:r}=this.state;if(r!==null){for(var e,t,o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];(e=(t=this.props).onReset)===null||e===void 0||e.call(t,{args:a,reason:"imperative-api"}),this.setState(i)}}componentDidCatch(r,e){var t,o;(t=(o=this.props).onError)===null||t===void 0||t.call(o,r,e)}componentDidUpdate(r,e){const{didCatch:t}=this.state,{resetKeys:o}=this.props;if(t&&e.error!==null&&f(r.resetKeys,o)){var a,s;(a=(s=this.props).onReset)===null||a===void 0||a.call(s,{next:o,prev:r.resetKeys,reason:"keys"}),this.setState(i)}}render(){const{children:r,fallbackRender:e,FallbackComponent:t,fallback:o}=this.props,{didCatch:a,error:s}=this.state;let u=r;if(a){const l={error:s,resetErrorBoundary:this.resetErrorBoundary};if(typeof e=="function")u=e(l);else if(t)u=d.createElement(t,l);else if(o!==void 0)u=o;else throw s}return d.createElement(c.Provider,{value:{didCatch:a,error:s,resetErrorBoundary:this.resetErrorBoundary}},u)}}function f(){let n=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];return n.length!==r.length||n.some((e,t)=>!Object.is(e,r[t]))}function E(n){if(n==null||typeof n.didCatch!="boolean"||typeof n.resetErrorBoundary!="function")throw new Error("ErrorBoundaryContext not found")}function m(){const n=d.useContext(c);E(n);const[r,e]=d.useState({error:null,hasError:!1}),t=d.useMemo(()=>({resetBoundary:()=>{n.resetErrorBoundary(),e({error:null,hasError:!1})},showBoundary:o=>e({error:o,hasError:!0})}),[n.resetErrorBoundary]);if(r.hasError)throw r.error;return t}function p(n,r){const e=d.forwardRef((o,a)=>d.createElement(h,r,d.createElement(n,{...o,ref:a}))),t=n.displayName||n.name||"Unknown";return e.displayName="withErrorBoundary(".concat(t,")"),e}export{h as ErrorBoundary,c as ErrorBoundaryContext,m as useErrorBoundary,p as withErrorBoundary};
